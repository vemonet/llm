# https://github.com/EmbarkStudios/cargo-deny/blob/main/deny.template.toml
# Note that all fields that take a lint level have these possible values:
# * deny - An error will be produced and the check will fail
# * warn - A warning will be produced, but the check will not fail
# * allow - No warning or error will be produced, though in some cases a note will be

[graph]
targets = [
    #"x86_64-unknown-linux-musl",
]
# Prune crates
#exclude = []
# If true, metadata will be collected with `--all-features`
all-features = false
# If true, metadata will be collected with `--no-default-features`. The same caveat with `all-features` applies
no-default-features = false
# If set, these feature will be enabled when collecting metadata
#features = []

# The output table provides options for how/if diagnostics are outputted
[output]
feature-depth = 1

# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# See https://spdx.org/licenses/ for list of possible licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-3-Clause",
    "MPL-2.0",
    "ISC",
    "Unicode-3.0",
    "Zlib",
    "BSL-1.0",
    "BSD-2-Clause",
]
# The confidence threshold for detecting a license from license text.
# The higher the value, the more closely the license text must be to the
# canonical license text of a valid SPDX license file.
# [possible values: any between 0.0 and 1.0].
confidence-threshold = 0.9
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its specific allow list
    #{ allow = ["Zlib"], crate = "adler32" },
    # { allow = ["OpenSSL"], name = "ring", version = "*" },
]

# # Some crates don't have (easily) machine readable licensing information,
# [[licenses.clarify]]
# crate = "ring"
# expression = "MIT AND ISC AND OpenSSL"
# license-files = [
#     { path = "LICENSE", hash = 0xbd0eed23 }
# ]

[licenses.private]
# If true, ignores workspace crates that aren't published, or are only
# published to private registries.
# To see how to mark a crate as unpublished (to the official registry),
# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.
ignore = false
# One or more private registries that you might publish crates to, if a crate
# is only published to private registries, and ignore is true, the crate will
# not have its license(s) checked
registries = [
    #"https://sekretz.com/registry
]


# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# The path where the advisory databases are cloned/fetched into
#db-path = "$CARGO_HOME/advisory-dbs"
# The url(s) of the advisory databases to use
#db-urls = ["https://github.com/rustsec/advisory-db"]
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # Ignore deprecation notice
    # "RUSTSEC-2024-0436",
]


# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
highlight = "all"
workspace-default-features = "allow"
# The default lint level for `default` features for external crates that are not
# members of the workspace.
external-default-features = "allow"
# List of crates that are allowed. Use with care!
allow = [
    #"ansi_term@0.11.0",
    #{ crate = "ansi_term@0.11.0", reason = "you can specify a reason it is allowed" },
]
# List of crates to deny
deny = [
    #{ crate = "ansi_term@0.11.0", reason = "you can specify a reason it is banned" },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ crate = "ansi_term@0.11.0", reason = "you can specify a reason why it can't be updated/removed" },
]
# Similarly to `skip` allows you to skip certain crates during duplicate detection.
skip-tree = [
    #{ crate = "ansi_term@0.11.0", depth = 20 },
]

# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry or git repo that is not in the allow list is encountered
unknown-registry = "warn"
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = []

[sources.allow-org]
github = []
gitlab = []
bitbucket = []
